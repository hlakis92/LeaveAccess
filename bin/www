#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('LeaveAccess:server');
let http = require('http');
let https = require('https');
let fs = require('fs');
let config = require('../config');

function setup(ssl) {
  if (ssl !== undefined && ssl.active === true) {
    return {
      key: fs.readFileSync(ssl.key),
      cert: fs.readFileSync(ssl.certificate),
      ca: fs.readFileSync(ssl.intermediate)
    };
  }
  return;
}


/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(config.port || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
function start(app, options) {
  if (options !== undefined) {
    return require('https').createServer(options, app);
  } else {
    return require('http').createServer(app);
  }
}

let options = setup(config.ssl);
let server = start(app, options);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
      'Pipe ' + port :
      'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
      'pipe ' + addr :
      'port ' + addr.port;
  console.log('App Listening on ' + bind);
}
